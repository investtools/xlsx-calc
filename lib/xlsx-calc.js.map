{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/Calculator.js","webpack:///./src/Exp.js","webpack:///./src/Range.js","webpack:///./src/RawValue.js","webpack:///./src/RefValue.js","webpack:///./src/UserFnExecutor.js","webpack:///./src/UserRawFnExecutor.js","webpack:///./src/col_str_2_int.js","webpack:///./src/exec_formula.js","webpack:///./src/find_all_cells_with_formulas.js","webpack:///./src/formulas-raw.js","webpack:///./src/formulas.js","webpack:///./src/getSanitizedSheetName.js","webpack:///./src/index.js","webpack:///./src/int_2_col_str.js","webpack:///./src/resolve_promises.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,QAAQ;AACjD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA,4B;;;;;;;;;;;;ACjDA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;ACpNA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6BAA6B,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;AC7FA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACTA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACxEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,E;;;;;;;;;;;;ACzBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;;AAEA;AACA;AACA;AACA,+BAA+B,KAAK;AACpC;AACA;AACA;AACA,E;;;;;;;;;;;;ACTA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,oBAAoB;AACvE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mBAAmB,wBAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC9JA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACzEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA;AACA,kDAAkD,KAAK;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,4BAA4B,IAAI;;AAE1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;AACA,oCAAoC,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;AACA,oCAAoC,KAAK;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACrZA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAIA,2B;;;;;;;;;;;;AC/CA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;ACbA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL,E","file":"xlsx-calc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","\"use strict\";\n\nconst RawValue = require('./RawValue.js');\nconst find_all_cells_with_formulas = require('./find_all_cells_with_formulas.js');\n\nclass Calculator {\n    \n    constructor(workbook, exec_formula) {\n        this.workbook = workbook;\n        this.expressions = [];\n        this.exec_formula = exec_formula;\n        this.variables = {};\n        let formulas = find_all_cells_with_formulas(workbook, exec_formula);\n        for (let i = formulas.length - 1; i >= 0; i--) {\n            let exp = exec_formula.build_expression(formulas[i]);\n            this.expressions.push(exp);\n        }\n    }\n    \n    setVar(var_name, value) {\n        let variable = this.variables[var_name];\n        if (variable) {\n            variable.setValue(value);\n        } else {\n            this.expressions.forEach(exp => {\n                this.setVarOfExpression(exp, var_name, value);\n            });\n        }\n    }\n    \n    setVarOfExpression(exp, var_name, value) {\n        for (let i = 0; i < exp.args.length; i++) {\n            let arg = exp.args[i];\n            if (arg === var_name) {\n                exp.args[i] = this.variables[var_name] || (this.variables[var_name] = new RawValue(value));\n            } else if (typeof arg === 'object' && (arg.name === 'Expression' || arg.name === 'UserFn')) {\n                this.setVarOfExpression(arg, var_name, value);\n            }\n        }\n    }\n    \n    execute() {\n        let promises = this.expressions.map(exp => {\n            return exp.update_cell_value();\n        });\n        return Promise.all(promises);\n    }\n}\n\nmodule.exports = Calculator;","\"use strict\";\n\nconst RawValue = require('./RawValue.js');\nconst RefValue = require('./RefValue.js');\nconst Range = require('./Range.js');\nconst resolve_promises = require('./resolve_promises.js');\nlet exp_id = 0;\nlet exec_id = 0;\n\nmodule.exports = function Exp(formula) {\n    var self = this;\n    self.id = ++exp_id;\n    self.args = [];\n    self.name = 'Expression';\n    self.update_cell_value = update_cell_value;\n    self.formula = formula;\n    \n    function handleException(e, formula, resolve, reject) {\n        if (e.message == '#N/A') {\n            formula.cell.v = 42;\n            formula.cell.t = 'e';\n            formula.cell.w = e.message;\n            resolve();\n        }\n        else {\n            //console.error('Error', current_execution, e);\n            reject(e);\n            //throw e;\n        }\n    }\n    \n    function update_cell_value() {\n        let hasPromise = false;\n        return new Promise((resolve, reject) => {\n            //let current_execution = exec_id++;\n            try {\n                //console.log('Exec', current_execution, formula.name, formula.cell.f);\n                var val_or_promise = self.calc();\n                if (typeof val_or_promise === 'object' && typeof val_or_promise['then'] === 'function') {\n                    hasPromise = true;\n                    val_or_promise.then(res => {\n                        formula.cell.v = res;\n                        if (typeof(formula.cell.v) === 'string') {\n                            formula.cell.t = 's';\n                        }\n                        else if (typeof(formula.cell.v) === 'number') {\n                            formula.cell.t = 'n';\n                        }\n                        formula.status = 'done';\n                        resolve(formula.cell.v);\n                    }).catch(e => {\n                        //console.log('Exp', self.id, 'error:', e);\n                        //reject(e);\n                        formula.status = 'done';\n                        handleException(e, formula, resolve, reject);\n                    });\n                }\n                else {\n                    formula.cell.v = val_or_promise;\n                    if (typeof(formula.cell.v) === 'string') {\n                        formula.cell.t = 's';\n                    }\n                    else if (typeof(formula.cell.v) === 'number') {\n                        formula.cell.t = 'n';\n                    }\n                    resolve(formula.cell.v);\n                }\n            }\n            catch (e) {\n                handleException(e, formula, resolve, reject);\n            }\n            finally {\n                if (!hasPromise) {\n                    formula.status = 'done';\n                }\n            }\n        });\n    }\n    \n    function exec(op, args, fn) {\n        for (var i = 0; i < args.length; i++) {\n            if (args[i] === op) {\n                try {\n                    var r = fn(args[i - 1].calc(), args[i + 1].calc());\n                    args.splice(i - 1, 3, new RawValue(r));\n                    i--;\n                }\n                catch (e) {\n                    console.error(e);\n                    throw Error(formula.name + ': evaluating ' + formula.cell.f + '\\n' + e.message);\n                    //throw e;\n                }\n            }\n        }\n    }\n\n    function exec_minus(args) {\n        for (var i = args.length; i--;) {\n            if (args[i] === '-') {\n                var r = -args[i + 1].calc();\n                if (typeof args[i - 1] !== 'string' && i > 0) {\n                    args.splice(i, 1, '+');\n                    args.splice(i + 1, 1, new RawValue(r));\n                }\n                else {\n                    args.splice(i, 2, new RawValue(r));\n                }\n            }\n        }\n    }\n    \n    self.calc = function() {\n        return new Promise((resolve, reject) => {\n            resolve_promises(self.args.concat()).then(args => {\n                try {\n                    exec_minus(args);\n                    exec('^', args, function(a, b) {\n                        return Math.pow(+a, +b);\n                    });\n                    exec('*', args, function(a, b) {\n                        return (+a) * (+b);\n                    });\n                    exec('/', args, function(a, b) {\n                        return (+a) / (+b);\n                    });\n                    exec('+', args, function(a, b) {\n                        return (+a) + (+b);\n                    });\n                    exec('&', args, function(a, b) {\n                        return '' + a + b;\n                    });\n                    exec('<', args, function(a, b) {\n                        return a < b;\n                    });\n                    exec('>', args, function(a, b) {\n                        return a > b;\n                    });\n                    exec('>=', args, function(a, b) {\n                        return a >= b;\n                    });\n                    exec('<=', args, function(a, b) {\n                        return a <= b;\n                    });\n                    exec('<>', args, function(a, b) {\n                        return a != b;\n                    });\n                    exec('=', args, function(a, b) {\n                        return a == b;\n                    });\n                    if (args.length == 1) {\n                        if (typeof args[0] === 'object' && typeof args[0]['then'] === 'function') {\n                            args[0].then(resolve).catch(reject);\n                            return;\n                        }\n                        if (typeof(args[0].calc) != 'function') {\n                            return resolve(args[0]);\n                        }\n                        else {\n                            return resolve(args[0].calc());\n                        }\n                    }\n                    else {\n                        console.log('something is not right');\n                    }\n                } catch(e) {\n                    reject(e);\n                }\n            }).catch(reject);\n        });\n    };\n\n    var last_arg;\n    self.push = function(buffer) {\n        if (buffer) {\n            var v;\n            if (!isNaN(buffer)) {\n                v = new RawValue(+buffer);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[A-Z]+[0-9]+:[A-Z]+[0-9]+$/)) {\n                v = new Range(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[^!]+![A-Z]+[0-9]+:[A-Z]+[0-9]+$/)) {\n                v = new Range(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[A-Z]+:[A-Z]+$/)) {\n                v = new Range(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[^!]+![A-Z]+:[A-Z]+$/)) {\n                v = new Range(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[A-Z]+[0-9]+$/)) {\n                v = new RefValue(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && buffer.trim().replace(/\\$/g, '').match(/^[^!]+![A-Z]+[0-9]+$/)) {\n                v = new RefValue(buffer.trim().replace(/\\$/g, ''), formula);\n            }\n            else if (typeof buffer === 'string' && !isNaN(buffer.trim().replace(/%$/, ''))) {\n                v = new RawValue(+(buffer.trim().replace(/%$/, '')) / 100.0);\n            }\n            else {\n                v = buffer;\n            }\n            if (((v === '=') && (last_arg == '>' || last_arg == '<')) || (last_arg == '<' && v === '>')) {\n                self.args[self.args.length - 1] += v;\n            }\n            else {\n                self.args.push(v);\n            }\n            last_arg = v;\n            //console.log(self.id, '-->', v);\n        }\n    };\n};","\"use strict\";\n\nconst col_str_2_int = require('./col_str_2_int.js');\nconst int_2_col_str = require('./int_2_col_str.js');\nconst getSanitizedSheetName = require('./getSanitizedSheetName.js');\n\nmodule.exports = function Range(str_expression, formula) {\n    \n    function promiseInSeq(sheet, matrix, min_row, max_row, min_col, max_col, sheet_name, resolve, reject, _row) {\n        //console.log('min_row =', min_row, 'max_row =', max_row);\n        //console.log('min_col =', min_col, 'max_col =', max_col);\n        for (let i = min_row; i <= max_row; i++) {\n            //console.log('ok i =', i);\n            let row;\n            if (_row) {\n                row = _row;\n            }\n            else {\n                row = [];\n                matrix.push(row);\n            }\n            for (let j = min_col; j <= max_col; j++) {\n                let cell_name = int_2_col_str(j) + i;\n                let cell_full_name = sheet_name + '!' + cell_name;\n                //console.log('range <<', cell_name, 'i =', i, 'j =', j);\n                if (formula.formula_ref[cell_full_name]) {\n                    if (formula.formula_ref[cell_full_name].status === 'working') {\n                        //console.log('Circular ref in range');\n                        reject('Circular ref');\n                        return;\n                    } else if (formula.formula_ref[cell_full_name].status === 'new') {\n                        formula.exec_formula(formula.formula_ref[cell_full_name]).then(r=>{\n                            row.push(sheet[cell_name].v);\n                            //console.log('recursao asincrona');\n                            j++;\n                            if (j > max_col) {\n                                j = 0;\n                                i++;\n                            }\n                            promiseInSeq(sheet, matrix, i, max_row, j, max_col, sheet_name, resolve, reject, row);\n                        }).catch(reject);\n                        return;\n                    } else if (formula.formula_ref[cell_full_name].status === 'done') {\n                        row.push(sheet[cell_name].v);\n                    }\n                }\n                else if (sheet[cell_name]) {\n                    row.push(sheet[cell_name].v);\n                }\n                else {\n                    row.push(null);\n                }\n            }\n        }\n        resolve();\n    }\n    \n    this.calc = function() {\n        return new Promise((resolve, reject) => {\n            try {\n                var range_expression, sheet_name, sheet;\n                if (str_expression.indexOf('!') != -1) {\n                    var aux = str_expression.split('!');\n                    sheet_name = getSanitizedSheetName(aux[0]);\n                    range_expression = aux[1];\n                }\n                else {\n                    sheet_name = formula.sheet_name;\n                    range_expression = str_expression;\n                }\n                sheet = formula.wb.Sheets[sheet_name];\n                var arr = range_expression.split(':');\n                var min_row = parseInt(arr[0].replace(/^[A-Z]+/, ''), 10) || 0;\n                var str_max_row = arr[1].replace(/^[A-Z]+/, '');\n                var max_row;\n                if (str_max_row === '' && sheet['!ref']) {\n                    str_max_row = sheet['!ref'].split(':')[1].replace(/^[A-Z]+/, '');\n                }\n                // the max is 1048576, but TLE\n                max_row = parseInt(str_max_row == '' ? '500000' : str_max_row, 10);\n                var min_col = col_str_2_int(arr[0]);\n                var max_col = col_str_2_int(arr[1]);\n                var matrix = [];\n                new Promise((res, rej) => {\n                    promiseInSeq(sheet, matrix, min_row, max_row, min_col, max_col, sheet_name, res, rej);\n                }).then(() => {\n                    resolve(matrix);\n                }).catch(reject);\n            } catch(e) {\n                reject(e);\n            }\n        });\n    };\n};\n","\"use strict\";\n\nmodule.exports = function RawValue(value) {\n    this.setValue = function(v) {\n        value = v;\n    };\n    this.calc = function() {\n        return value;\n    };\n};\n","\"use strict\";\n\nconst getSanitizedSheetName = require('./getSanitizedSheetName.js');\n\nmodule.exports = function RefValue(str_expression, formula) {\n    var self = this;\n    this.name = 'RefValue';\n    this.str_expression = str_expression;\n    this.formula = formula;\n\n    self.parseRef = function() {\n        var sheet, sheet_name, cell_name, cell_full_name;\n        if (str_expression.indexOf('!') != -1) {\n            var aux = str_expression.split('!');\n            sheet_name = getSanitizedSheetName(aux[0]);\n            sheet = formula.wb.Sheets[sheet_name];\n            cell_name = aux[1];\n        }\n        else {\n            sheet = formula.sheet;\n            sheet_name = formula.sheet_name;\n            cell_name = str_expression;\n        }\n        if (!sheet) {\n            throw Error(\"Sheet \" + sheet_name + \" not found.\");\n        }\n        cell_full_name = sheet_name + '!' + cell_name;\n        return {\n            sheet: sheet,\n            sheet_name: sheet_name,\n            cell_name: cell_name,\n            cell_full_name: cell_full_name\n        };\n    };\n\n    this.calc = function() {\n        return new Promise((resolve, reject) => {\n            var resolved_ref = self.parseRef();\n            var sheet = resolved_ref.sheet;\n            var cell_name = resolved_ref.cell_name;\n            var cell_full_name = resolved_ref.cell_full_name;\n            var ref_cell = sheet[cell_name];\n            if (!ref_cell) {\n                return resolve(null);\n            }\n            var formula_ref = formula.formula_ref[cell_full_name];\n            if (formula_ref) {\n                if (formula_ref.status === 'new') {\n                    formula.exec_formula(formula_ref).then(res => {\n                        resolve(res);\n                    }).catch(reject);\n                    //return sheet[cell_name].v;\n                }\n                else if (formula_ref.status === 'working') {\n                    //console.log('Circular ref in Ref');\n                    reject('Circular ref');\n                    //throw new Error('Circular ref');\n                }\n                else if (formula_ref.status === 'done') {\n                    if (sheet[cell_name].t === 'e') {\n                        reject(sheet[cell_name].w);\n                        //console.log('ref is an error');\n                        //throw new Error(sheet[cell_name].w);\n                    }\n                    return resolve(sheet[cell_name].v);\n                }\n            }\n            else {\n                return resolve(sheet[cell_name].v);\n            }\n        });\n    };\n};\n","\"use strict\";\n\nconst resolve_promises = require('./resolve_promises.js');\n\nmodule.exports = function UserFnExecutor(user_function) {\n    var self = this;\n    self.name = 'UserFn';\n    self.args = [];\n    \n    self.calc = function() {\n        return new Promise((resolve, reject) => {\n            resolve_promises(self.args).then(args => {\n                try {\n                    resolve(user_function.apply(self, args.map(f=>f.calc())));\n                } catch(e) {\n                    reject(e);\n                }\n            }).catch(reject);\n        });\n    };\n    \n    self.push = function(buffer) {\n        self.args.push(buffer);\n    };\n    \n};","\"use strict\";\n\nmodule.exports = function UserRawFnExecutor(user_function) {\n    var self = this;\n    self.name = 'UserRawFn';\n    self.args = [];\n    self.calc = function() {\n        return user_function.apply(self, self.args);\n    };\n    self.push = function(buffer) {\n        self.args.push(buffer);\n    };\n};\n","\"use strict\";\n\nmodule.exports = function col_str_2_int(col_str) {\n    var r = 0;\n    var colstr = col_str.replace(/[0-9]+$/, '');\n    for (var i = colstr.length; i--;) {\n        r += Math.pow(26, colstr.length - i - 1) * (colstr.charCodeAt(i) - 64);\n    }\n    return r - 1;\n};","\"use strict\";\n\nconst Exp = require('./Exp.js');\nconst RawValue = require('./RawValue.js');\nconst UserFnExecutor = require('./UserFnExecutor.js');\nconst UserRawFnExecutor = require('./UserRawFnExecutor.js');\n\nvar xlsx_Fx = {};\nvar xlsx_raw_Fx = {};\n\nimport_functions(require('./formulas.js'));\nimport_raw_functions(require('./formulas-raw.js'));\n\nconst common_operations = {\n    '*': 'multiply',\n    '+': 'plus',\n    '-': 'minus',\n    '/': 'divide',\n    '^': 'power',\n    '&': 'concat',\n    '<': 'lt',\n    '>': 'gt',\n    '=': 'eq'\n};\n\nfunction import_raw_functions(functions, opts) {\n    for (var key in functions) {\n        xlsx_raw_Fx[key] = functions[key];\n    }\n}\n\nfunction import_functions(formulajs, opts) {\n    opts = opts || {};\n    var prefix = opts.prefix || '';\n    for (var key in formulajs) {\n        var obj = formulajs[key];\n        if (typeof(obj) === 'function') {\n            xlsx_Fx[prefix + key] = obj;\n        }\n        else if (typeof(obj) === 'object') {\n            import_functions(obj, my_assign(opts, { prefix: key + '.' }));\n        }\n    }\n}\n\nfunction my_assign(dest, source) {\n    var obj = JSON.parse(JSON.stringify(dest));\n    for (var k in source) {\n        obj[k] = source[k];\n    }\n    return obj;\n}\n\nfunction build_expression(formula) {\n    formula.status = 'working';\n    var root_exp;\n    var str_formula = formula.cell.f;\n    if (str_formula[0] == '=') {\n        str_formula = str_formula.substr(1);\n    }\n    var exp_obj = root_exp = new Exp(formula);\n    var buffer = '',\n        is_string = false,\n        was_string = false;\n    var fn_stack = [{\n        exp: exp_obj\n    }];\n    for (var i = 0; i < str_formula.length; i++) {\n        if (str_formula[i] == '\"') {\n            if (is_string) {\n                exp_obj.push(new RawValue(buffer));\n                is_string = false;\n                was_string = true;\n            }\n            else {\n                is_string = true;\n            }\n            buffer = '';\n        }\n        else if (is_string) {\n            buffer += str_formula[i];\n        }\n        else if (str_formula[i] == '(') {\n            var o, trim_buffer = buffer.trim(),\n                special = xlsx_Fx[trim_buffer];\n            var special_raw = xlsx_raw_Fx[trim_buffer];\n            if (special_raw) {\n                special = new UserRawFnExecutor(special_raw, formula);\n            }\n            else if (special) {\n                special = new UserFnExecutor(special, formula);\n            }\n            else if (trim_buffer) {\n                //Error: \"Worksheet 1\"!D145: Function INDEX not found\n                throw new Error('\"' + formula.sheet_name + '\"!' + formula.name + ': Function ' + buffer + ' not found');\n            }\n            o = new Exp(formula);\n            fn_stack.push({\n                exp: o,\n                special: special\n            });\n            exp_obj = o;\n            buffer = '';\n        }\n        else if (common_operations[str_formula[i]]) {\n            if (!was_string) {\n                exp_obj.push(buffer);\n            }\n            was_string = false;\n            exp_obj.push(str_formula[i]);\n            buffer = '';\n        }\n        else if (str_formula[i] === ',' && fn_stack[fn_stack.length - 1].special) {\n            was_string = false;\n            fn_stack[fn_stack.length - 1].exp.push(buffer);\n            fn_stack[fn_stack.length - 1].special.push(fn_stack[fn_stack.length - 1].exp);\n            fn_stack[fn_stack.length - 1].exp = exp_obj = new Exp(formula);\n            buffer = '';\n        }\n        else if (str_formula[i] == ')') {\n            var v, stack = fn_stack.pop();\n            exp_obj = stack.exp;\n            exp_obj.push(buffer);\n            v = exp_obj;\n            buffer = '';\n            exp_obj = fn_stack[fn_stack.length - 1].exp;\n            if (stack.special) {\n                stack.special.push(v);\n                exp_obj.push(stack.special);\n            }\n            else {\n                exp_obj.push(v);\n            }\n        }\n        else {\n            buffer += str_formula[i];\n        }\n    }\n    root_exp.push(buffer);\n    return root_exp;\n}\n\nfunction exec_formula(formula) {\n    let root_exp = build_expression(formula);\n    return root_exp.update_cell_value();\n}\n\nexec_formula.set_fx = function set_fx(name, fn) {\n    xlsx_Fx[name] = fn;\n};\n\nexec_formula.exec_fx = function exec_fx(name, args) {\n    return xlsx_Fx[name].apply(this, args);\n};\n\nexec_formula.import_functions = import_functions;\nexec_formula.import_raw_functions = import_raw_functions;\nexec_formula.build_expression = build_expression;\nmodule.exports = exec_formula;\n","\"use strict\";\n\nmodule.exports = function find_all_cells_with_formulas(wb, exec_formula) {\n    var formula_ref = {};\n    var cells = [];\n    for (var sheet_name in wb.Sheets) {\n        var sheet = wb.Sheets[sheet_name];\n        for (var cell_name in sheet) {\n            if (sheet[cell_name].f) {\n                var formula = formula_ref[sheet_name + '!' + cell_name] = {\n                    formula_ref: formula_ref,\n                    wb: wb,\n                    sheet: sheet,\n                    sheet_name: sheet_name,\n                    cell: sheet[cell_name],\n                    name: cell_name,\n                    status: 'new',\n                    exec_formula: exec_formula\n                };\n                cells.push(formula);\n            }\n        }\n    }\n    return cells;\n};\n","\"use strict\";\n\nconst int_2_col_str = require('./int_2_col_str.js');\nconst col_str_2_int = require('./col_str_2_int.js');\nconst RawValue = require('./RawValue.js');\nconst Range = require('./Range.js');\nconst RefValue = require('./RefValue.js');\n\nfunction raw_offset(cell_ref, rows, columns, height, width) {\n    height = (height || new RawValue(1)).calc();\n    width = (width || new RawValue(1)).calc();\n    if (cell_ref.args.length === 1 && cell_ref.args[0].name === 'RefValue') {\n        var ref_value = cell_ref.args[0];\n        var parsed_ref = ref_value.parseRef();\n        var col = col_str_2_int(parsed_ref.cell_name) + columns.calc();\n        var col_str = int_2_col_str(col);\n        var row = +parsed_ref.cell_name.replace(/^[A-Z]+/g, '') + rows.calc();\n        var cell_name = col_str + row;\n        if (height === 1 && width === 1) {\n            return new RefValue(cell_name, ref_value.formula).calc();\n        }\n        else {\n            var end_range_col = int_2_col_str(col + width - 1);\n            var end_range_row = row + height - 1;\n            var end_range = end_range_col + end_range_row;\n            var str_expression = parsed_ref.sheet_name + '!' + cell_name + ':' + end_range;\n            return new Range(str_expression, ref_value.formula).calc();\n        }\n    }\n}\n\nfunction resolveOnErrorValue(onerrorvalue, resolve, reject) {\n    let v_or_promise = onerrorvalue.calc();\n    if (typeof v_or_promise === 'object' && typeof v_or_promise['then'] === 'function') {\n        //console.log('resolvendo onerrorvalue');\n        v_or_promise.then(r => {\n            //console.log('On error value =', r);\n            resolve(r);\n        }).catch(e=> {\n            //console.log('Erro no on error value');\n            reject(e);\n        });\n    } else {\n        //console.log('valor no caso de erro =', v_or_promise);\n        resolve(v_or_promise);\n    }\n}\n\nfunction iferror(cell_ref, onerrorvalue) {\n    return new Promise((resolve, reject) => {\n        try {\n            cell_ref.calc().then(value=>{\n                //console.log('tudo ok com o cell_ref...', typeof value);\n                if (typeof value === 'undefined') {\n                    resolveOnErrorValue(onerrorvalue, resolve, reject);\n                } else if (typeof value === 'number' && (isNaN(value) || value === Infinity || value === -Infinity)) {\n                    resolveOnErrorValue(onerrorvalue, resolve, reject);\n                } else {\n                    resolve(value);\n                }\n            }).catch(e => {\n                //console.log('2 error level');\n                resolveOnErrorValue(onerrorvalue, resolve, reject);\n            });\n        } catch(e) {\n            return onerrorvalue.calc();\n        }\n    });\n}\n\nmodule.exports = {\n    'OFFSET': raw_offset,\n    'IFERROR': iferror\n};\n","\"use strict\";\n\n// +---------------------+\n// | FORMULAS REGISTERED |\n// +---------------------+\nlet formulas = {\n    'FLOOR': Math.floor,\n    '_xlfn.FLOOR.MATH': Math.floor,\n    'ABS': Math.abs,\n    'SQRT': Math.sqrt,\n    'VLOOKUP': vlookup,\n    'MAX': max,\n    'SUM': sum,\n    'MIN': min,\n    'CONCATENATE': concatenate,\n    'IF': _if,\n    'PMT': pmt,\n    'COUNTA': counta,\n    'IRR': irr,\n    'NORM.INV': normsInv,\n    '_xlfn.NORM.INV': normsInv,\n    'STDEV': stDeviation,\n    'AVERAGE': avg,\n    'EXP': EXP,\n    'LN': Math.log,\n    '_xlfn.VAR.P': var_p,\n    'VAR.P': var_p,\n    '_xlfn.COVARIANCE.P': covariance_p,\n    'COVARIANCE.P': covariance_p,\n    'TRIM': trim,\n    'LEN': len,\n    'ISBLANK': is_blank\n};\n\nfunction len(a) {\n    return ('' + a).length;\n}\n\nfunction trim(a) {\n    return ('' + a).trim();\n}\n\nfunction is_blank(a) {\n    return !a;\n}\n\nfunction covariance_p(a, b) {\n    a = getArrayOfNumbers(a);\n    b = getArrayOfNumbers(b);\n    if (a.length != b.length) {\n        return 'N/D';\n    }\n    var inv_n = 1.0 / a.length;\n    var avg_a = sum.apply(this, a) / a.length;\n    var avg_b = sum.apply(this, b) / b.length;\n    var s = 0.0;\n    for (var i = 0; i < a.length; i++) {\n        s += (a[i] - avg_a) * (b[i] - avg_b);\n    }\n    return s * inv_n;\n}\n\nfunction getArrayOfNumbers(range) {\n    var arr = [];\n    for (var i = 0; i < range.length; i++) {\n        var arg = range[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                if (typeof(matrix[j]) == 'number') {\n                    arr.push(matrix[j]);\n                }\n                else if (Array.isArray(matrix[j])) {\n                    for (var k = matrix[j].length; k--;) {\n                        if (typeof(matrix[j][k]) == 'number') {\n                            arr.push(matrix[j][k]);\n                        }\n                    }\n                }\n                // else {\n                //   wtf is that?\n                // }\n            }\n        }\n        else {\n            if (typeof(arg) == 'number') {\n                arr.push(arg);\n            }\n        }\n    }\n    return arr;\n}\n\nfunction var_p() {\n    var average = avg.apply(this, arguments);\n    var s = 0.0;\n    var c = 0;\n    for (var i = 0; i < arguments.length; i++) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                for (var k = matrix[j].length; k--;) {\n                    if (matrix[j][k] !== null && matrix[j][k] !== undefined) {\n                        s += Math.pow(matrix[j][k] - average, 2);\n                        c++;\n                    }\n                }\n            }\n        }\n        else {\n            s += Math.pow(arg - average, 2);\n            c++;\n        }\n    }\n    return s / c;\n}\n\nfunction EXP(n) {\n    return Math.pow(Math.E, n);\n}\n\nfunction avg() {\n    return sum.apply(this, arguments) / counta.apply(this, arguments);\n}\n\nfunction stDeviation() {\n    var array = getArrayOfNumbers(arguments);\n\n    function _mean(array) {\n        return array.reduce(function(a, b) {\n            return a + b;\n        }) / array.length;\n    }\n    var mean = _mean(array),\n        dev = array.map(function(itm) {\n            return (itm - mean) * (itm - mean);\n        });\n    return Math.sqrt(dev.reduce(function(a, b) {\n        return a + b;\n    }) / (array.length - 1));\n}\n\n/// Original C++ implementation found at http://www.wilmott.com/messageview.cfm?catid=10&threadid=38771\n/// C# implementation found at http://weblogs.asp.net/esanchez/archive/2010/07/29/a-quick-and-dirty-implementation-of-excel-norminv-function-in-c.aspx\n/*\n *     Compute the quantile function for the normal distribution.\n *\n *     For small to moderate probabilities, algorithm referenced\n *     below is used to obtain an initial approximation which is\n *     polished with a final Newton step.\n *\n *     For very large arguments, an algorithm of Wichura is used.\n *\n *  REFERENCE\n *\n *     Beasley, J. D. and S. G. Springer (1977).\n *     Algorithm AS 111: The percentage points of the normal distribution,\n *     Applied Statistics, 26, 118-121.\n *\n *      Wichura, M.J. (1988).\n *      Algorithm AS 241: The Percentage Points of the Normal Distribution.\n *      Applied Statistics, 37, 477-484.\n */\nfunction normsInv(p, mu, sigma) {\n    if (p < 0 || p > 1) {\n        throw \"The probality p must be bigger than 0 and smaller than 1\";\n    }\n    if (sigma < 0) {\n        throw \"The standard deviation sigma must be positive\";\n    }\n\n    if (p == 0) {\n        return -Infinity;\n    }\n    if (p == 1) {\n        return Infinity;\n    }\n    if (sigma == 0) {\n        return mu;\n    }\n\n    var q, r, val;\n\n    q = p - 0.5;\n\n    /*-- use AS 241 --- */\n    /* double ppnd16_(double *p, long *ifault)*/\n    /*      ALGORITHM AS241  APPL. STATIST. (1988) VOL. 37, NO. 3\n            Produces the normal deviate Z corresponding to a given lower\n            tail area of P; Z is accurate to about 1 part in 10**16.\n    */\n    if (Math.abs(q) <= .425) { /* 0.075 <= p <= 0.925 */\n        r = .180625 - q * q;\n        val =\n            q * (((((((r * 2509.0809287301226727 +\n                            33430.575583588128105) * r + 67265.770927008700853) * r +\n                        45921.953931549871457) * r + 13731.693765509461125) * r +\n                    1971.5909503065514427) * r + 133.14166789178437745) * r +\n                3.387132872796366608) / (((((((r * 5226.495278852854561 +\n                        28729.085735721942674) * r + 39307.89580009271061) * r +\n                    21213.794301586595867) * r + 5394.1960214247511077) * r +\n                687.1870074920579083) * r + 42.313330701600911252) * r + 1);\n    }\n    else { /* closer than 0.075 from {0,1} boundary */\n\n        /* r = min(p, 1-p) < 0.075 */\n        if (q > 0)\n            r = 1 - p;\n        else\n            r = p;\n\n        r = Math.sqrt(-Math.log(r));\n        /* r = sqrt(-log(r))  <==>  min(p, 1-p) = exp( - r^2 ) */\n\n        if (r <= 5) { /* <==> min(p,1-p) >= exp(-25) ~= 1.3888e-11 */\n            r += -1.6;\n            val = (((((((r * 7.7454501427834140764e-4 +\n                                .0227238449892691845833) * r + .24178072517745061177) *\n                            r + 1.27045825245236838258) * r +\n                        3.64784832476320460504) * r + 5.7694972214606914055) *\n                    r + 4.6303378461565452959) * r +\n                1.42343711074968357734) / (((((((r *\n                                1.05075007164441684324e-9 + 5.475938084995344946e-4) *\n                            r + .0151986665636164571966) * r +\n                        .14810397642748007459) * r + .68976733498510000455) *\n                    r + 1.6763848301838038494) * r +\n                2.05319162663775882187) * r + 1);\n        }\n        else { /* very close to  0 or 1 */\n            r += -5;\n            val = (((((((r * 2.01033439929228813265e-7 +\n                                2.71155556874348757815e-5) * r +\n                            .0012426609473880784386) * r + .026532189526576123093) *\n                        r + .29656057182850489123) * r +\n                    1.7848265399172913358) * r + 5.4637849111641143699) *\n                r + 6.6579046435011037772) / (((((((r *\n                            2.04426310338993978564e-15 + 1.4215117583164458887e-7) *\n                        r + 1.8463183175100546818e-5) * r +\n                    7.868691311456132591e-4) * r + .0148753612908506148525) * r + .13692988092273580531) * r +\n                .59983220655588793769) * r + 1);\n        }\n\n        if (q < 0.0) {\n            val = -val;\n        }\n    }\n\n    return mu + sigma * val;\n}\n\nfunction irr(range, guess) {\n    var min = -2.0;\n    var max = 1.0;\n    var n = 0;\n    do {\n        var guest = (min + max) / 2;\n        var NPV = 0;\n        for (var i = 0; i < range.length; i++) {\n            var arg = range[i];\n            NPV += arg[0] / Math.pow((1 + guest), i);\n        }\n        if (NPV > 0) {\n            if (min === max) {\n                max += Math.abs(guest);\n            }\n            min = guest;\n        }\n        else {\n            max = guest;\n        }\n        n++;\n    } while (Math.abs(NPV) > 0.000001 && n < 100000);\n    //console.log(n);\n    return guest;\n}\n\nfunction counta() {\n    var r = 0;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                for (var k = matrix[j].length; k--;) {\n                    if (matrix[j][k] !== null && matrix[j][k] !== undefined) {\n                        r++;\n                    }\n                }\n            }\n        }\n        else {\n            if (arg !== null && arg !== undefined) {\n                r++;\n            }\n        }\n    }\n    return r;\n}\n\nfunction pmt(rate_per_period, number_of_payments, present_value, future_value, type) {\n    type = type || 0;\n    future_value = future_value || 0;\n    if (rate_per_period != 0.0) {\n        // Interest rate exists\n        var q = Math.pow(1 + rate_per_period, number_of_payments);\n        return -(rate_per_period * (future_value + (q * present_value))) / ((-1 + q) * (1 + rate_per_period * (type)));\n\n    }\n    else if (number_of_payments != 0.0) {\n        // No interest rate, but number of payments exists\n        return -(future_value + present_value) / number_of_payments;\n    }\n    return 0;\n}\n\nfunction _if(condition, _then, _else) {\n    if (condition) {\n        return _then;\n    }\n    else {\n        return _else;\n    }\n}\n\nfunction concatenate() {\n    var r = '';\n    for (var i = 0; i < arguments.length; i++) {\n        r += arguments[i];\n    }\n    return r;\n}\n\nfunction sum() {\n    //console.log('sum...');\n    var r = 0;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var matrix = arg;\n            for (var j = matrix.length; j--;) {\n                for (var k = matrix[j].length; k--;) {\n                    if (!isNaN(matrix[j][k])) {\n                        r += +matrix[j][k];\n                    }\n                }\n            }\n        }\n        else {\n            r += +arg;\n        }\n    }\n    //console.log('end sum.');\n    return r;\n}\n\nfunction max() {\n    var max = null;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var arr = arg;\n            for (var j = arr.length; j--;) {\n                max = max == null || max < arr[j] ? arr[j] : max;\n            }\n        }\n        else if (!isNaN(arg)) {\n            max = max == null || max < arg ? arg : max;\n        }\n        else {\n            console.log('WTF??', arg);\n        }\n    }\n    return max;\n}\n\nfunction min() {\n    var result = null;\n    for (var i = arguments.length; i--;) {\n        var arg = arguments[i];\n        if (Array.isArray(arg)) {\n            var arr = arg;\n            for (var j = arr.length; j--;) {\n                result = result == null || result > arr[j] ? arr[j] : result;\n            }\n        }\n        else if (!isNaN(arg)) {\n            result = result == null || result > arg ? arg : result;\n        }\n        else {\n            console.log('WTF??', arg);\n        }\n    }\n    return result;\n}\n\nfunction vlookup(key, matrix, return_index) {\n    for (var i = 0; i < matrix.length; i++) {\n        if (matrix[i][0] == key) {\n            return matrix[i][return_index - 1];\n        }\n    }\n    throw Error('#N/A');\n}\n\nmodule.exports = formulas;\n","\"use strict\";\n\nmodule.exports = function getSanitizedSheetName(sheet_name) {\n    var quotedMatch = sheet_name.match(/^'(.*)'$/);\n    if (quotedMatch) {\n        return quotedMatch[1];\n    }\n    else {\n        return sheet_name;\n    }\n};\n","\"use strict\";\n\nconst int_2_col_str = require('./int_2_col_str.js');\nconst col_str_2_int = require('./col_str_2_int.js');\nconst exec_formula = require('./exec_formula.js');\nconst find_all_cells_with_formulas = require('./find_all_cells_with_formulas.js');\nconst Calculator = require('./Calculator.js');\n\n\nfunction exec_next(formulas, i, resolve, reject) {\n    if (i === formulas.length) {\n        resolve();\n        return;\n    }\n    //console.log('executing', i+1, 'of', formulas.length,'...');\n    exec_formula(formulas[i]).then(x => {\n        exec_next(formulas, i + 1, resolve, reject);\n    }).catch(err => {\n        //console.error(err);\n        reject(err);\n    });\n}\n\nvar XLSX_CALC = function(workbook) {\n    return new Promise((resolve, reject) => {\n        var formulas = find_all_cells_with_formulas(workbook, exec_formula);\n        exec_next(formulas, 0, resolve, reject);\n        //for (var i = formulas.length - 1; i >= 0; i--) {\n        //    exec_formula(formulas[i]);\n        //}\n        //resolve();\n    });\n};\n\nXLSX_CALC.calculator = function calculator(workbook) {\n    return new Calculator(workbook, exec_formula);\n};\n\nXLSX_CALC.set_fx = exec_formula.set_fx;\nXLSX_CALC.exec_fx = exec_formula.exec_fx;\nXLSX_CALC.col_str_2_int = col_str_2_int;\nXLSX_CALC.int_2_col_str = int_2_col_str;\nXLSX_CALC.import_functions = exec_formula.import_functions;\nXLSX_CALC.import_raw_functions = exec_formula.import_raw_functions;\n\n\n\nmodule.exports = XLSX_CALC;","\"use strict\";\n\nmodule.exports = function int_2_col_str(n) {\n    var dividend = n + 1;\n    var columnName = '';\n    var modulo;\n    var guard = 10;\n    while (dividend > 0 && guard--) {\n        modulo = (dividend - 1) % 26;\n        columnName = String.fromCharCode(modulo + 65) + columnName;\n        dividend = (dividend - modulo - 1) / 26;\n    }\n    return columnName;\n};","\"use strict\";\n\nconst RawValue = require('./RawValue.js');\n\nmodule.exports = function resolve_promises(args) {\n    //console.log('resolvendo promises...');\n    return new Promise((resolve, reject) => {\n        let promises = [],\n            new_args = [];\n        for (let i = 0; i < args.length; i++) {\n            let arg = args[i];\n            if (typeof arg === 'object' && typeof arg['calc'] === 'function') {\n                let val_or_promise = arg.calc();\n                if (typeof val_or_promise === 'object' && typeof val_or_promise['then'] === 'function') {\n                    promises.push(val_or_promise);\n                    val_or_promise.then(r => {\n                        new_args[i] = new RawValue(r);\n                    }).catch(reject);\n                }\n                else {\n                    new_args[i] = new RawValue(val_or_promise);\n                }\n            }\n            else {\n                new_args[i] = arg;\n            }\n        }\n        Promise.all(promises).then(() => {\n            //console.log('new_args =', new_args.map(a => a.calc()));\n            resolve(new_args);\n        }).catch(reject);\n    });\n};"],"sourceRoot":""}